{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.2"
    },
    "colab": {
      "name": "AI06a_lab_2018195014.ipynb",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/reccos7/AI_Class/blob/main/AI06a_lab_2018195014.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5y-fI1jK8eLR"
      },
      "source": [
        "# AI 06a Iris\n",
        "\n",
        "> 학번: 2018195014\n",
        ">\n",
        "> 이름: 이민재\n",
        "\n",
        "---\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0JNSCXq98eLS"
      },
      "source": [
        "### 1. Prepare Data\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pi-rV-Nx8eLT"
      },
      "source": [
        "**붓꽃 분류 문제**\n",
        "\n",
        "- 붓꽃의 4가지 속성 (꽃받침의 길이와 너비, 꽃잎의 길이와 너비)을 사용하여 3개의 붓꽃 종류 (Setosa, Versicolour, Virginica) 를 분류하는 문제\n",
        "- 총 150개의 데이터 중 각 분류마다 50개\n",
        "- Train set - 120, Test set - 30\n",
        "- 코드에서 다음 3가지 항목들을 변경해보며 test 정확도를 향상:\n",
        "\n",
        "1. 신경망의 층 수와 노드 수 (Edit 1)\n",
        "2. 학습률 (Edit 2)\n",
        "3. 반복횟수 (Edit 3)\n",
        "\n",
        "- test acc가 **0.95** 이상이 나오면 PASS\n",
        "\n",
        "\n",
        "### Iris dataset\n",
        "\n",
        "This is perhaps the best known database to be found in the pattern recognition literature. Fisher's paper is a classic in the field and is referenced frequently to this day. (See Duda & Hart, for example.) The data set contains 3 classes of 50 instances each, where each class refers to a type of iris plant. One class is linearly separable from the other 2; the latter are NOT linearly separable from each other.\n",
        "\n",
        "Predicted attribute: class of iris plant.\n",
        "\n",
        "\n",
        "### Number of Instances:\n",
        "\n",
        "150 (50 in each of three classes)\n",
        "\n",
        "### Attribute Information:\n",
        "\n",
        "4 numeric, predictive attributes and the class\n",
        "\n",
        "* sepal(꽃받침) length in cm\n",
        "* sepal(꽃받침) width in cm\n",
        "* petal(꽃잎) length in cm\n",
        "* petal(꽃잎) width in cm\n",
        "\n",
        "### Classes: \n",
        "\n",
        "- Iris Setosa\n",
        "- Iris Versicolour\n",
        "- Iris Virginica\n",
        "\n",
        "### Class Distribution\n",
        "\n",
        "33.3% for each of 3 classes.\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pzrxG3Q38eLT",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6c08c1f8-5d35-4dee-9336-7d6737f75ce6"
      },
      "source": [
        "# ai06_lib 모듈 다운로드\n",
        "# 일정 시간이 지나서 Colab 런타임과의 연결이 끊어졌다면 다운로드 했던 파일도 사라지기 때문에 다시 다운로드해야 합니다.\n",
        "\n",
        "!wget https://ycs-class.s3.ap-northeast-2.amazonaws.com/modules/ai06_lib.py"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2021-10-22 18:49:05--  https://ycs-class.s3.ap-northeast-2.amazonaws.com/modules/ai06_lib.py\n",
            "Resolving ycs-class.s3.ap-northeast-2.amazonaws.com (ycs-class.s3.ap-northeast-2.amazonaws.com)... 52.219.148.78\n",
            "Connecting to ycs-class.s3.ap-northeast-2.amazonaws.com (ycs-class.s3.ap-northeast-2.amazonaws.com)|52.219.148.78|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 14372 (14K) [binary/octet-stream]\n",
            "Saving to: ‘ai06_lib.py’\n",
            "\n",
            "ai06_lib.py         100%[===================>]  14.04K  --.-KB/s    in 0s      \n",
            "\n",
            "2021-10-22 18:49:05 (154 MB/s) - ‘ai06_lib.py’ saved [14372/14372]\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "jvlu8WWC8eLX"
      },
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "import os\n",
        "from sklearn import datasets\n",
        "\n",
        "from ai06_lib import *"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6t91NU9u8eLZ",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c3ce125a-d16d-4fea-fd0c-57e9a91dd0fe"
      },
      "source": [
        "# 데이터셋 로드\n",
        "\n",
        "iris = datasets.load_iris()\n",
        "\n",
        "# sepal length in cm, sepal width in cm\n",
        "X = iris.data\n",
        "Y = iris.target\n",
        "\n",
        "pool = np.arange(X.shape[0])\n",
        "np.random.shuffle(pool)\n",
        "\n",
        "train_mask = pool[:120]\n",
        "test_mask = pool[120:]\n",
        "\n",
        "x_train = X[train_mask]\n",
        "y_train = Y[train_mask]\n",
        "\n",
        "x_test = X[test_mask]\n",
        "y_test = Y[test_mask]\n",
        "\n",
        "print(\"train data : \", x_train.shape)\n",
        "print(\"train label : \", y_train.shape)\n",
        "print(\"test data : \", x_test.shape)\n",
        "print(\"test label : \", y_test.shape)\n"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train data :  (120, 4)\n",
            "train label :  (120,)\n",
            "test data :  (30, 4)\n",
            "test label :  (30,)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "oCvnBxshp3xP",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e5b434e6-3e59-491a-8fe5-47d74922ab52"
      },
      "source": [
        "# Train set에 어떤 내용이 들어있는지 확인\n",
        "\n",
        "print( 'x_train')\n",
        "print( x_train[:5] )\n",
        "print( 'y_train')\n",
        "print( y_train[:5] )"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "x_train\n",
            "[[7.7 2.6 6.9 2.3]\n",
            " [4.8 3.4 1.6 0.2]\n",
            " [6.2 2.2 4.5 1.5]\n",
            " [5.6 2.8 4.9 2. ]\n",
            " [5.2 4.1 1.5 0.1]]\n",
            "y_train\n",
            "[2 0 1 2 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "eqJRI-t98eLd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "outputId": "86df1cd2-dd32-48ab-a158-3e4e0ed590d9"
      },
      "source": [
        "# 속성 중 첫 번째, 두 번째만 사용하여 분류를 그래프로 표현\n",
        "\n",
        "plt.scatter(X[:, 0], X[:, 1], c = Y)\n",
        "plt.colorbar()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-1sewi7y8eLg"
      },
      "source": [
        "### 2. Define and Train Model\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NXV-EAOc8eLg",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a66c5626-14db-45a1-ca64-c2fe36a477bf"
      },
      "source": [
        "# hidden_size_list 를 변경하여 신경망의 노드 수나 층 수를 지정할 수 있습니다. (Edit 1)\n",
        "\n",
        "# 입력층 노드 4개, 출력층 노드 3개는 고정이므로 은닉층의 갯수와 노드 수를 지정해주면 됩니다.\n",
        "\n",
        "# 예시) 2층 신경망 (은닉층1 노드 2개)\n",
        "# hidden_size_list=[2] \n",
        "\n",
        "# 예시) 3층 신경망 (은닉층1 노드 3개, 은닉층2 노드 3개)\n",
        "# hidden_size_list=[3, 3] \n",
        "\n",
        "# 예시) 4층 신경망 (은닉층1 노드 5개, 은닉층2 노드 3개, 은닉층3 노드 2개)\n",
        "# hidden_size_list=[5, 3, 2] \n",
        "\n",
        "hidden_size_list = [10]\n",
        "\n",
        "net = MultiLayerNet( input_size=x_train.shape[1], hidden_size_list = hidden_size_list, output_size=3, activation='relu', weight_init_std='he' )\n",
        "\n",
        "\n",
        "# 학습률을 바꿀 수 있습니다. (Edit 2)\n",
        "# 1, 0.1, 0.01, 0.001 등 여러 값을 시도해보세요.\n",
        "\n",
        "learning_rate = 0.1\n",
        "\n",
        "train_loss_list = []\n",
        "train_acc_list = []\n",
        "test_acc_list = []\n",
        "\n",
        "\n",
        "# 반복 횟수를 바꿀 수 있습니다. (Edit 3)\n",
        "# 정확도가 계속 증가할 여지가 있다면 반복 횟수를 늘릴 필요가 있습니다.\n",
        "\n",
        "for i in range(1000):\n",
        "    \n",
        "    # 기울기 계산\n",
        "    grad = net.gradient(x_train, y_train)\n",
        "\n",
        "    # 가중치 갱신    \n",
        "    for key in net.params:\n",
        "        net.params[key] -= learning_rate * grad[key]\n",
        "                \n",
        "    # 손실 계산\n",
        "    loss = net.loss(x_train, y_train)\n",
        "    \n",
        "    train_loss_list.append(loss)\n",
        "    \n",
        "    # 정확도 출력 빈도 변경 가능\n",
        "    if i % 10 == 0:\n",
        "        train_acc = net.accuracy(x_train, y_train)\n",
        "        test_acc = net.accuracy(x_test, y_test)\n",
        "        train_acc_list.append( train_acc )\n",
        "        test_acc_list.append( test_acc )\n",
        "        print('iter: {} loss: {} test accuracy: {:.4f} train accuracy: {:.4f}'.format(i, loss, net.accuracy(x_test, y_test), net.accuracy(x_train, y_train) ))\n",
        "        \n",
        "        "
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "iter: 0 loss: 1.6051127894580604 test accuracy: 0.3667 train accuracy: 0.3250\n",
            "iter: 10 loss: 0.40504278964441387 test accuracy: 0.8000 train accuracy: 0.8750\n",
            "iter: 20 loss: 0.3337436967434501 test accuracy: 0.8667 train accuracy: 0.9333\n",
            "iter: 30 loss: 0.2834731007299762 test accuracy: 0.9000 train accuracy: 0.9417\n",
            "iter: 40 loss: 0.24657721022937976 test accuracy: 0.9333 train accuracy: 0.9583\n",
            "iter: 50 loss: 0.28734281555715474 test accuracy: 0.8667 train accuracy: 0.8917\n",
            "iter: 60 loss: 0.3330067038309759 test accuracy: 0.8333 train accuracy: 0.8167\n",
            "iter: 70 loss: 0.2892797279418353 test accuracy: 0.8667 train accuracy: 0.8833\n",
            "iter: 80 loss: 0.2891540277301608 test accuracy: 0.8333 train accuracy: 0.8833\n",
            "iter: 90 loss: 0.27058620997759886 test accuracy: 0.8667 train accuracy: 0.9000\n",
            "iter: 100 loss: 0.25517638512038676 test accuracy: 0.8667 train accuracy: 0.9000\n",
            "iter: 110 loss: 0.24658278264350558 test accuracy: 0.9000 train accuracy: 0.9000\n",
            "iter: 120 loss: 0.23460897357979096 test accuracy: 0.9333 train accuracy: 0.9083\n",
            "iter: 130 loss: 0.22139397333384847 test accuracy: 0.9333 train accuracy: 0.9083\n",
            "iter: 140 loss: 0.2094555589558464 test accuracy: 0.9333 train accuracy: 0.9083\n",
            "iter: 150 loss: 0.19804305370216924 test accuracy: 0.9333 train accuracy: 0.9083\n",
            "iter: 160 loss: 0.1868864688987809 test accuracy: 0.9333 train accuracy: 0.9083\n",
            "iter: 170 loss: 0.17677116966949538 test accuracy: 0.9333 train accuracy: 0.9083\n",
            "iter: 180 loss: 0.1668504627651977 test accuracy: 0.9333 train accuracy: 0.9083\n",
            "iter: 190 loss: 0.1575449433084241 test accuracy: 0.9667 train accuracy: 0.9167\n",
            "iter: 200 loss: 0.14880759423440998 test accuracy: 0.9667 train accuracy: 0.9250\n",
            "iter: 210 loss: 0.14101521889424026 test accuracy: 0.9667 train accuracy: 0.9250\n",
            "iter: 220 loss: 0.13369699624539472 test accuracy: 0.9667 train accuracy: 0.9250\n",
            "iter: 230 loss: 0.12826987262914366 test accuracy: 0.9667 train accuracy: 0.9250\n",
            "iter: 240 loss: 0.12426466127517101 test accuracy: 0.9667 train accuracy: 0.9333\n",
            "iter: 250 loss: 0.12016470831509697 test accuracy: 0.9667 train accuracy: 0.9333\n",
            "iter: 260 loss: 0.11572140787942725 test accuracy: 0.9667 train accuracy: 0.9333\n",
            "iter: 270 loss: 0.11134443759839172 test accuracy: 0.9667 train accuracy: 0.9333\n",
            "iter: 280 loss: 0.10724729430999252 test accuracy: 0.9667 train accuracy: 0.9417\n",
            "iter: 290 loss: 0.10336537144114595 test accuracy: 0.9667 train accuracy: 0.9583\n",
            "iter: 300 loss: 0.09976942767706959 test accuracy: 0.9667 train accuracy: 0.9583\n",
            "iter: 310 loss: 0.0968649949200275 test accuracy: 0.9667 train accuracy: 0.9583\n",
            "iter: 320 loss: 0.09449229375497527 test accuracy: 0.9667 train accuracy: 0.9583\n",
            "iter: 330 loss: 0.09281872641754842 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 340 loss: 0.09144948077893149 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 350 loss: 0.090004147273459 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 360 loss: 0.08824363340415402 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 370 loss: 0.08637125575368279 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 380 loss: 0.08446416044826154 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 390 loss: 0.08250731934844915 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 400 loss: 0.08052362040779541 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 410 loss: 0.07880012811030282 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 420 loss: 0.07735290724001796 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 430 loss: 0.0760782595987724 test accuracy: 0.9667 train accuracy: 0.9667\n",
            "iter: 440 loss: 0.0749616047822859 test accuracy: 0.9667 train accuracy: 0.9750\n",
            "iter: 450 loss: 0.07399740073034428 test accuracy: 0.9667 train accuracy: 0.9750\n",
            "iter: 460 loss: 0.07310644350736652 test accuracy: 0.9667 train accuracy: 0.9750\n",
            "iter: 470 loss: 0.07222044867502772 test accuracy: 0.9667 train accuracy: 0.9750\n",
            "iter: 480 loss: 0.07131223158974699 test accuracy: 0.9667 train accuracy: 0.9750\n",
            "iter: 490 loss: 0.07037806150931494 test accuracy: 0.9667 train accuracy: 0.9750\n",
            "iter: 500 loss: 0.06946714305354276 test accuracy: 0.9667 train accuracy: 0.9750\n",
            "iter: 510 loss: 0.06856644042660452 test accuracy: 0.9667 train accuracy: 0.9750\n",
            "iter: 520 loss: 0.06766436997531024 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 530 loss: 0.0667782655395885 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 540 loss: 0.06592121131643804 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 550 loss: 0.06510079841012535 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 560 loss: 0.06431971864562344 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 570 loss: 0.06357715644572155 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 580 loss: 0.06287026383421347 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 590 loss: 0.06219535849045334 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 600 loss: 0.061538843114536924 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 610 loss: 0.060885301449531776 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 620 loss: 0.06027637432224777 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 630 loss: 0.059702795243647744 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 640 loss: 0.05918279495209462 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 650 loss: 0.058673390572274796 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 660 loss: 0.05816829970197108 test accuracy: 0.9667 train accuracy: 0.9833\n",
            "iter: 670 loss: 0.057669866134515586 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 680 loss: 0.057180235910191016 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 690 loss: 0.056700855211199726 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 700 loss: 0.05623294512404987 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 710 loss: 0.05577737449385563 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 720 loss: 0.05531389036491628 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 730 loss: 0.054878853820512316 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 740 loss: 0.054435274482036 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 750 loss: 0.054028738150544625 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 760 loss: 0.053646241889679404 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 770 loss: 0.053279903642483604 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 780 loss: 0.05291040850596403 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 790 loss: 0.05254480973875691 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 800 loss: 0.05217553432568025 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 810 loss: 0.051834624306614625 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 820 loss: 0.05151670628766155 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 830 loss: 0.05121303257190754 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 840 loss: 0.05091880971410161 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 850 loss: 0.05063934070287272 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 860 loss: 0.050361318247941704 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 870 loss: 0.050086351981285276 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 880 loss: 0.049815508094531905 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 890 loss: 0.04954946270006544 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 900 loss: 0.049286704582890875 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 910 loss: 0.04902992506393331 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 920 loss: 0.04877970110487971 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 930 loss: 0.048535377664859984 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 940 loss: 0.04829663236248831 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 950 loss: 0.04806252973863114 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 960 loss: 0.04783360111460679 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 970 loss: 0.047610435679132306 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 980 loss: 0.04739327163360791 test accuracy: 0.9667 train accuracy: 0.9917\n",
            "iter: 990 loss: 0.047181173700754926 test accuracy: 0.9667 train accuracy: 0.9917\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Dia2ZXJ98eLj",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "1fb703de-f9d6-4f18-eccd-db0fc3078041"
      },
      "source": [
        "# 손실 함수 값의 변화\n",
        "\n",
        "plt.plot(train_loss_list)\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_5Zj874j8eLm",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "outputId": "745911b2-4990-4c6d-9828-a447af9e92fe"
      },
      "source": [
        "# Train set, test set 정확도 추이\n",
        "\n",
        "plt.plot(train_acc_list, label='train_acc')\n",
        "plt.plot(test_acc_list, label='test_acc')\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pKiKwCM88eLo"
      },
      "source": [
        "### 3. Test Model\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "XlyLNmJu8eLo",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 336
        },
        "outputId": "64488a52-c1f8-4fbb-bf75-aaaf7fcdbfdf"
      },
      "source": [
        "# 속성 중 두 개만 사용하여 예측 값을 실제와 비교하는 그래프\n",
        "\n",
        "o_test = net.predict(x_test)\n",
        "o_test = np.argmax(o_test, axis=1)\n",
        "\n",
        "fig = plt.figure(figsize=(16, 5))\n",
        "\n",
        "ax1 = fig.add_subplot(1, 2, 1)\n",
        "ax2 = fig.add_subplot(1, 2, 2)\n",
        "\n",
        "ax1.scatter(x_test[:, 0], x_test[:, 1], c = o_test)\n",
        "ax2.scatter(x_test[:, 0], x_test[:, 1], c = y_test)\n",
        "\n",
        "ax1.set_title('Predict')\n",
        "ax2.set_title('Real')\n",
        "\n",
        "plt.show()"
      ],
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1152x360 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zWJrFHAH8eLs"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
